// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Enums
enum AchievementCode {
  // sphere_observation
  // cylinder_observation
  // prism_observation
  // cone_observation
  // pyramid_observation
  sphere_evaluation
  cylinder_evaluation
  prism_evaluation
  cone_evaluation
  pyramid_evaluation
}

enum ShapeCode {
  cylinder
  cone
  sphere
  // prism
  // pyramid
}

enum QuestionType {
  post_test_mcq
  evaluation_mcq
  evaluation_essay
}

// Models
model Notification {
  id          String  @id @default(cuid())
  title       String
  description String?
  image       String?
  isRead      Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Achievement {
  id          String          @id @default(cuid())
  code        AchievementCode @unique
  title       String
  description String?
  image       String?

  userAchievements UserAchievement[]
}

model UserAchievement {
  createdAt DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String

  @@id([userId, achievementId])
}

model AnswerChoice {
  id     String @id @default(cuid())
  answer String @db.Text()

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@index([questionId])
}

model Question {
  id            String    @id @default(cuid())
  shapeCode     ShapeCode
  image         String?
  question      String    @db.Text()
  correctAnswer String

  type                QuestionType
  answerChoices       AnswerChoice[]
  evaluationQuestions EvaluationQuestion[]
  observations        Observation[]
}

model EvaluationQuestion {
  answer    String?
  isCorrect Boolean?

  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String
  question     Question   @relation(fields: [questionId], references: [id])
  questionId   String

  @@id([evaluationId, questionId])
}

model Evaluation {
  id          String    @id @default(cuid())
  shapeCode   ShapeCode
  score       Int       @default(0)
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user                User                 @relation(fields: [userId], references: [id])
  userId              String
  evaluationQuestions EvaluationQuestion[]

  @@index([userId])
}

model Observation {
  id        String    @id @default(cuid())
  shapeCode ShapeCode

  r           Float?
  t           Float?
  v           Float?
  comparisonV Float?
  isCompleted Boolean @default(false)

  postTestQuestion   Question @relation(fields: [postTestQuestionId], references: [id])
  postTestQuestionId String
  postTestAnswer     String?
  isPostTestCorrect  Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  xp    Int @default(0)
  level Int @default(1)

  accounts         Account[]
  sessions         Session[]
  observations     Observation[]
  evaluations      Evaluation[]
  userAchievements UserAchievement[]
  notifications    Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
